Smalltalk current createPackage: 'GitHubPage' properties: #{}!
Widget subclass: #GitHubPage
	instanceVariableNames: 'username repositoryDiv userInfo'
	category: 'GitHubPage'!

!GitHubPage methodsFor: 'accessing'!

username

	^username
!

username: aString

	username := aString
! !

!GitHubPage methodsFor: 'private'!

sampleRepositoryResponse

'
  {
    "git_url": "git://github.com/dalehenrich/smallsource.git",
    "ssh_url": "git@github.com:dalehenrich/smallsource.git",
    "mirror_url": null,
    "url": "https://api.github.com/repos/dalehenrich/smallsource",
    "has_downloads": true,
    "created_at": "2012-01-30T18:02:07Z",
    "has_issues": false,
    "master_branch": null,
    "description": "Smalltalk source files",
    "forks": 0,
    "svn_url": "https://github.com/dalehenrich/smallsource",
    "html_url": "https://github.com/dalehenrich/smallsource",
    "fork": true,
    "has_wiki": true,
    "private": false,
    "clone_url": "https://github.com/dalehenrich/smallsource.git",
    "homepage": "",
    "size": 128,
    "open_issues": 0,
    "updated_at": "2012-03-01T16:36:38Z",
    "owner": {
      "url": "https://api.github.com/users/dalehenrich",
      "gravatar_id": "5d423de04ebac0b8f9412a9a381c9460",
      "login": "dalehenrich",
      "avatar_url": "https://secure.gravatar.com/avatar/5d423de04ebac0b8f9412a9a381c9460?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
      "id": 623951
    },
    "name": "smallsource",
    "watchers": 2,
    "pushed_at": "2012-01-31T23:28:34Z",
    "id": 3307281,
    "language": null
  },
'
! !

!GitHubPage methodsFor: 'rendering'!

renderOn: html
 html div class:'container'; with:[ 
	self renderBodyOn: html.
	self renderRepositoryHeading: html.
     	
	repositoryDiv := html div id:'repos'.
	self getRepositories.
	self initializeMasonry.]
!

renderBodyOn: html
	html h1: 'Dale Henrich''s GitHub Repositories'.
	
	html p with: [:h |  
		h with: 'Hi there, world. This page is powered by '.
                h 
                        a href: 'http://amber-lang.net/'; 
                        with: 'Amber Smalltalk'.
                h with: '.'].
        html p with: [:h | 
                h with: 'If you''re new to Smalltalk, take an '.
                h
                        a href: 'amber/learn.html'; 
                        with: 'Amber-powered Smaltalk tutorial'.
                h with: ' right in your own browser!!'].
	html p with: [:h |
		h with: 'The list of repositories below is generated by making calls to the'.
		h
			a href: 'http://developer.github.com/';
			with: ' GitHub development API'.
		h with: ' from Amber Smalltalk.' ].
        html p with: [:h |
                 h with: 'If you want to see how this is done: ' .
                 h
                        button
                                with: 'Browse the ', self class name, ' class';
                                onClick: [ Browser openOn: self class ].
    		h  with: ' and '.
                h
			a href: 'https://github.com/', self username, '/', self username, '.github.com';
                        with: 'visit the github repository'.
                h with: '.'].
!

renderRepositoryData: repositoryData

	| homepage sortedData |
	sortedData := repositoryData asArray sort: [:a :b | a  name asUppercase <= b name asUppercase ].
	repositoryDiv contents: [: html |
			sortedData do: [:repo | 
				html div class:'four columns repo'; with: [
					html h4 with:[
						html
                    		    			a href: (repo at: 'html_url'); 
                	        			with:  repo name ].
					
					html p: repo description.
(homepage := repo homepage)
						ifNotEmpty: [	
							html
								a href: homepage;
								with: homepage.
							].].
	].
self reloadMasonry.
]
!

renderRepositoryError: aString
	"append not replace"

	repositoryDiv with: aString
!

getRepositories

	jQuery 
		ajax: self repoUrl
		options: #{
			'type' -> 'GET'.
			'dataType' -> 'json'.
			'success' -> [:repositoryData :status :jqXHR | 
				self renderRepositoryData: repositoryData data ].
     			'error' ->[:jqXHR :status :error | 
				self renderRepositoryError: status printString  ]}.
!

getUserInfo
	
	jQuery 
		ajax: self userInfoUrl
		options: #{
			'type' -> 'GET'.
			'dataType' -> 'jsonp'.
			'success' -> [:repositoryData :status :jqXHR | 
				 ^repositoryData data at:'name' ].
     			'error' ->[:jqXHR :status :error | 
				^'error getting your name.  check your username'  ]}.
!

apiUrl
	^ 'https://api.github.com'
!

repoUrl
	^self  userInfoUrl, '/repos'
!

userInfoUrl
	^self apiUrl , '/users/', self username
!

renderUserData: repositoryData

headline contents: [:html |
	html h1 with:repositoryData at:'name'.
			]
!

renderRepositoryHeading:html
	html div class:'row'; with:[
		html div class:'eight columns alpha'; with:[
			html h2:'Repositories'].
     		html div with:[   	
			html 
        			button
				class:'refresh';
                		with: 'Refresh repository list';
                		onClick: [  repositoryDiv contents:  [:div | self getRepositories.
													 ] ] ] ].
!

runMasonry
	<$('#repos').masonry({itemSelector:'.repo' , columnWidth:10})>
!

initializeMasonry
	<$('#repos').masonry({itemSelector:'.repo' , columnWidth:1})>
!

reloadMasonry
	<$('#repos').masonry('reload')>
! !

!GitHubPage class methodsFor: 'instance creation'!

openOn: aString

	(self new)
		username: aString;
          	appendToJQuery: 'body' asJQuery
! !

